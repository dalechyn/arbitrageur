diff --git a/node_modules/@uniswap/v2-sdk/dist/constants.d.ts b/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
index 7c92f18..81eb354 100644
--- a/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
+++ b/node_modules/@uniswap/v2-sdk/dist/constants.d.ts
@@ -5,5 +5,3 @@ export declare const MINIMUM_LIQUIDITY: JSBI;
 export declare const ZERO: JSBI;
 export declare const ONE: JSBI;
 export declare const FIVE: JSBI;
-export declare const _997: JSBI;
-export declare const _1000: JSBI;
diff --git a/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts b/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts
index d0e2c7c..44df36c 100644
--- a/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts
+++ b/node_modules/@uniswap/v2-sdk/dist/entities/pair.d.ts
@@ -1,4 +1,5 @@
 import { BigintIsh, Price, Token, CurrencyAmount } from '@uniswap/sdk-core';
+import JSBI from 'jsbi';
 export declare const computePairAddress: ({ factoryAddress, tokenA, tokenB }: {
     factoryAddress: string;
     tokenA: Token;
@@ -8,7 +9,7 @@ export declare class Pair {
     readonly liquidityToken: Token;
     private readonly tokenAmounts;
     static getAddress(tokenA: Token, tokenB: Token): string;
-    constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>);
+    constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>, feeNumerator?: BigintIsh, feeDenominator?: BigintIsh);
     /**
      * Returns true if the token is either token0 or token1
      * @param token to check
@@ -35,6 +36,8 @@ export declare class Pair {
     get token1(): Token;
     get reserve0(): CurrencyAmount<Token>;
     get reserve1(): CurrencyAmount<Token>;
+    get feeNumerator(): JSBI;
+    get feeDenominator(): JSBI;
     reserveOf(token: Token): CurrencyAmount<Token>;
     getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair];
     getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair];
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
index f1a6331..4f21a37 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.cjs.development.js
@@ -232,11 +232,13 @@ var computePairAddress = function computePairAddress(_ref) {
   return address.getCreate2Address(factoryAddress, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);
 };
 var Pair = /*#__PURE__*/function () {
-  function Pair(currencyAmountA, tokenAmountB) {
+  function Pair(currencyAmountA, tokenAmountB, feeNumerator, feeDenominator) {
     var tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks
     ? [currencyAmountA, tokenAmountB] : [tokenAmountB, currencyAmountA];
     this.liquidityToken = new sdkCore.Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, 'UNI-V2', 'Uniswap V2');
     this.tokenAmounts = tokenAmounts;
+    this.feeNumerator = feeNumerator ?? JSBI.BigInt(997)
+    this.feeDenominator = feeDenominator ?? JSBI.BigInt(1000)
   }
 
   Pair.getAddress = function getAddress(tokenA, tokenB) {
diff --git a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
index 9a899ed..6eb1367 100644
--- a/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
+++ b/node_modules/@uniswap/v2-sdk/dist/v2-sdk.esm.js
@@ -11,8 +11,6 @@ var MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal
 var ZERO = /*#__PURE__*/JSBI.BigInt(0);
 var ONE = /*#__PURE__*/JSBI.BigInt(1);
 var FIVE = /*#__PURE__*/JSBI.BigInt(5);
-var _997 = /*#__PURE__*/JSBI.BigInt(997);
-var _1000 = /*#__PURE__*/JSBI.BigInt(1000);
 
 function _defineProperties(target, props) {
   for (var i = 0; i < props.length; i++) {
@@ -226,11 +224,13 @@ var computePairAddress = function computePairAddress(_ref) {
   return getCreate2Address(factoryAddress, keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);
 };
 var Pair = /*#__PURE__*/function () {
-  function Pair(currencyAmountA, tokenAmountB) {
+  function Pair(currencyAmountA, tokenAmountB, feeNumerator = 997, feeDenominator = 1000) {
     var tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks
     ? [currencyAmountA, tokenAmountB] : [tokenAmountB, currencyAmountA];
     this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, 'UNI-V2', 'Uniswap V2');
     this.tokenAmounts = tokenAmounts;
+    this.feeNumerator = JSBI.BigInt(feeNumerator)
+    this.feeDenominator = JSBI.BigInt(feeDenominator)
   }
 
   Pair.getAddress = function getAddress(tokenA, tokenB) {
@@ -283,9 +283,9 @@ var Pair = /*#__PURE__*/function () {
 
     var inputReserve = this.reserveOf(inputAmount.currency);
     var outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);
-    var inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);
+    var inputAmountWithFee = JSBI.multiply(inputAmount.quotient, this.feeNumerator);
     var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);
-    var denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee);
+    var denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, this.feeDenominator), inputAmountWithFee);
     var outputAmount = CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));
 
     if (JSBI.equal(outputAmount.quotient, ZERO)) {
@@ -304,8 +304,8 @@ var Pair = /*#__PURE__*/function () {
 
     var outputReserve = this.reserveOf(outputAmount.currency);
     var inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);
-    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000);
-    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997);
+    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), this.feeDenominator);
+    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), this.feeNumerator);
     var inputAmount = CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));
     return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];
   };
