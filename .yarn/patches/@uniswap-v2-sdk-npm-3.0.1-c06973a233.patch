diff --git a/dist/entities/pair.d.ts b/dist/entities/pair.d.ts
index d0e2c7c18e7e39d329cb30b69ed8905f6ea41317..798ee9ada3d4c1bc60a2d0dd8d76b4d4636925a4 100644
--- a/dist/entities/pair.d.ts
+++ b/dist/entities/pair.d.ts
@@ -1,14 +1,16 @@
 import { BigintIsh, Price, Token, CurrencyAmount } from '@uniswap/sdk-core';
-export declare const computePairAddress: ({ factoryAddress, tokenA, tokenB }: {
+import JSBI from 'jsbi';
+export declare const computePairAddress: ({ factoryAddress, tokenA, tokenB, initCodeHash }: {
     factoryAddress: string;
     tokenA: Token;
     tokenB: Token;
+    initCodeHash: string;
 }) => string;
 export declare class Pair {
     readonly liquidityToken: Token;
     private readonly tokenAmounts;
-    static getAddress(tokenA: Token, tokenB: Token): string;
-    constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>);
+    static getAddress(tokenA: Token, tokenB: Token, factoryAddress?: string, initCodeHash?: string): string;
+    constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>, feeNumerator?: JSBI, feeDenominator?: JSBI);
     /**
      * Returns true if the token is either token0 or token1
      * @param token to check
@@ -35,6 +37,8 @@ export declare class Pair {
     get token1(): Token;
     get reserve0(): CurrencyAmount<Token>;
     get reserve1(): CurrencyAmount<Token>;
+    get feeNumerator(): JSBI;
+    get feeDenominator(): JSBI;
     reserveOf(token: Token): CurrencyAmount<Token>;
     getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair];
     getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair];
diff --git a/dist/index.js b/dist/index.js
index b9df67ce78c9620be09296a8d7fdfce2358eebd5..d919a7d5f4fb43b1711c3702670778bab7c684e7 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,8 +1,3 @@
 
 'use strict'
-
-if (process.env.NODE_ENV === 'production') {
-  module.exports = require('./v2-sdk.cjs.production.min.js')
-} else {
-  module.exports = require('./v2-sdk.cjs.development.js')
-}
+module.exports = require('./v2-sdk.cjs.development.js')
diff --git a/dist/v2-sdk.cjs.development.js b/dist/v2-sdk.cjs.development.js
index f1a6331fa1f56547e8198356ed2944bff473be71..2ab48dc7912d50a729b67684150e9c4ba1a19a45 100644
--- a/dist/v2-sdk.cjs.development.js
+++ b/dist/v2-sdk.cjs.development.js
@@ -17,8 +17,6 @@ var MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal
 var ZERO = /*#__PURE__*/JSBI.BigInt(0);
 var ONE = /*#__PURE__*/JSBI.BigInt(1);
 var FIVE = /*#__PURE__*/JSBI.BigInt(5);
-var _997 = /*#__PURE__*/JSBI.BigInt(997);
-var _1000 = /*#__PURE__*/JSBI.BigInt(1000);
 
 function _defineProperties(target, props) {
   for (var i = 0; i < props.length; i++) {
@@ -222,28 +220,32 @@ var InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {
 var computePairAddress = function computePairAddress(_ref) {
   var factoryAddress = _ref.factoryAddress,
       tokenA = _ref.tokenA,
-      tokenB = _ref.tokenB;
+      tokenB = _ref.tokenB,
+      initCodeHash = _ref.initCodeHash;
 
   var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],
       token0 = _ref2[0],
       token1 = _ref2[1]; // does safety checks
 
 
-  return address.getCreate2Address(factoryAddress, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);
+  return address.getCreate2Address(factoryAddress, solidity.keccak256(['bytes'], [solidity.pack(['address', 'address'], [token0.address, token1.address])]), initCodeHash);
 };
 var Pair = /*#__PURE__*/function () {
-  function Pair(currencyAmountA, tokenAmountB) {
+  function Pair(currencyAmountA, tokenAmountB, feeNumerator = JSBI.BigInt(997), feeDenominator = JSBI.BigInt(1000)) {
     var tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks
     ? [currencyAmountA, tokenAmountB] : [tokenAmountB, currencyAmountA];
     this.liquidityToken = new sdkCore.Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, 'UNI-V2', 'Uniswap V2');
     this.tokenAmounts = tokenAmounts;
+    this.feeNumerator = feeNumerator;
+    this.feeDenominator = feeDenominator;
   }
 
-  Pair.getAddress = function getAddress(tokenA, tokenB) {
+  Pair.getAddress = function getAddress(tokenA, tokenB, factoryAddress = FACTORY_ADDRESS, initCodeHash = INIT_CODE_HASH) {
     return computePairAddress({
-      factoryAddress: FACTORY_ADDRESS,
+      factoryAddress: factoryAddress,
       tokenA: tokenA,
-      tokenB: tokenB
+      tokenB: tokenB,
+      initCodeHash: initCodeHash
     });
   }
   /**
@@ -289,9 +291,9 @@ var Pair = /*#__PURE__*/function () {
 
     var inputReserve = this.reserveOf(inputAmount.currency);
     var outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);
-    var inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);
+    var inputAmountWithFee = JSBI.multiply(inputAmount.quotient, this.feeNumerator);
     var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);
-    var denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee);
+    var denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, this.feeDenominator), inputAmountWithFee);
     var outputAmount = sdkCore.CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));
 
     if (JSBI.equal(outputAmount.quotient, ZERO)) {
@@ -310,8 +312,8 @@ var Pair = /*#__PURE__*/function () {
 
     var outputReserve = this.reserveOf(outputAmount.currency);
     var inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);
-    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000);
-    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997);
+    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), this.feeDenominator);
+    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), this.feeNumerator);
     var inputAmount = sdkCore.CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));
     return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];
   };
